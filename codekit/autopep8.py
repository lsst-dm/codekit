"""Utilities for applying autopep8 to a GitHub repository."""

import os
from StringIO import StringIO  # FIXME update for Python 3

import git
import sh


from .licensing import all_files


def autopep8_repo(gh, github_repo, branch_name, clone_dir,
                  pep8_ignore_codes, pep8_max_line_length):
    """Apply autopep8 to a GitHub repository.

    *Note*: the repository is cloned into `clone_dir`, and changes are
    pushed back to the remote on the `branch_name` branch. However, the
    local clone is not cleaned up. Use :class:`codekit.TempDir` to create
    a self-cleaning temporary directory for the clone.

    Parameters
    ----------
    gh : obj
        A GitHub session, usually created by
        :func:`codekit.codetools.login_github`.
    github_repo : obj
        A GitHub repo, generated by `github3`.
    branch_name : str
        Name of the branch to create from master and commit in.
    clone_dir : str
        Directory to clone the repository into.
    pep8_ignore_codes : str
        String with comma-separated PEP8 error codes that should be
        ignored by autopep8 (this value is passed to autopep8's
        --ignore argument.
    pep8_max_line_length : int
        Maximum line length setting for autopep8 (passed to --max-line-length
        argument).
    """
    # Clone repo
    repo = git.Repo.clone_from(github_repo.clone_url, clone_dir)

    # Create a ticket branch to work in
    ticket_branch = repo.create_head(branch_name)
    ticket_branch.checkout()

    # Process repo
    run_autopep8(clone_dir, pep8_ignore_codes, pep8_max_line_length)
    if repo.is_dirty():
        # be pessimistic and just add all Python files;
        # I don't think this will actually affect unchanged files
        for path in all_files(clone_dir, ('*.py',)):
            repo.index.add([os.path.relpath(path, start=clone_dir)])
        repo.index.commit(_make_commit_message(pep8_ignore_codes,
                                               pep8_max_line_length))

    # push branch to remote
    remote = repo.remote(name='origin')
    refspec = 'refs/heads/{br}:refs/heads/{br}'.format(br=branch_name)
    remote.push(refspec=refspec)


def run_autopep8(clone_dir, pep8_ignore_codes, pep8_max_line_length):
    """Apply autopep8 to a cloned repository, modifing it in place.

    Parameters
    ----------
    clone_dir : str
        Directory where a repo has been cloned into.
    pep8_ignore_codes : str
        String with comma-separated PEP8 error codes that should be
        ignored by autopep8 (this value is passed to autopep8's
        --ignore argument.
    pep8_max_line_length : int
        Maximum line length setting for autopep8 (passed to --max-line-length
        argument).
    """
    out_log = StringIO()
    err_log = StringIO()
    sh.autopep8(clone_dir,
                in_place=True,
                recursive=True,
                ignore=pep8_ignore_codes,
                max_line_length=pep8_max_line_length,
                _out=out_log,
                _err=err_log)
    print(out_log.getvalue())
    print(err_log.getvalue())


def _make_commit_message(ignore_codes, max_line_length):
    template = """PEP8 fixes via lsst-autopep8

PEP8 errors ignored:

{ignore_codes}

Max line length setting: {max_line_length:d}
"""
    ignore_code_list = '- ' + ignore_codes.replace(',', '\n- ')
    return template.format(ignore_codes=ignore_code_list,
                           max_line_length=max_line_length)
